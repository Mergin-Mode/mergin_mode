{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","isOpen","setIsOpen","useEffect","camera","controls","scene","renderer","helper","plane","raycaster","THREE","mouse","onMouseMove","event","el","document","getElementById","getBoundingClientRect","left","top","x","clientX","window","innerWidth","y","clientY","innerHeight","setFromCamera","intersects","intersectObject","length","position","set","lookAt","face","normal","copy","point","onWindowResize","aspect","updateProjectionMatrix","setSize","antialias","setPixelRatio","devicePixelRatio","shadowMap","enabled","appendChild","domElement","up","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxPolarAngle","Math","PI","geometry","g","pos","getAttribute","pa","array","hVerts","parameters","width","wVerts","height","prev","j","i","random","needsUpdate","computeVertexNormals","generateTerrain","material","color","side","flatShading","castShadow","receiveShadow","add","light","shadow","near","far","bottom","right","bias","mapSize","lhelper","addEventListener","init","animate","requestAnimationFrame","update","render","className","Navbar","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","DropdownItem","divider","NavItem","NavLink","NavbarText","split","minSize","defaultSize","id","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.436e131d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{ useState,useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\nimport SplitPane from 'react-split-pane';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nfunction App() {\n   const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n  useEffect(()=>{\n\n   \n\n      var camera, controls, scene, renderer,helper,plane;\n      var raycaster = new THREE.Raycaster();\n      var mouse = new THREE.Vector2();\n\n      init();\n      //render(); // remove when using next line for animation loop (requestAnimationFrame)\n      animate();\n\n      function init() {\n\n        \nconst generateTerrain = (g /*,m, e*/) => {\n  const pos = g.getAttribute(\"position\");\n  const pa = pos.array;\n\n  const hVerts = g.parameters.width;\n  const wVerts = g.parameters.height;\n  let prev = 0;\n  for (let j = 0; j < hVerts; j++) {\n    for (let i = 0; i < wVerts; i++) {\n      Math.random() > 0.5 ? (pa[3 * (j * wVerts + i) + 2] = prev + Math.random() * 3) :\n      (pa[3 * (j * wVerts + i) + 2] = prev - Math.random() * 3) ;\n      prev = pa[3 * (j * wVerts + i) + 2];\n    }\n  }\n  pos.needsUpdate = true;\n  g.computeVertexNormals();\n};\n\n\n        scene = new THREE.Scene();\n        // scene.background = new THREE.Color( 0xffffff );\n        // scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n        renderer = new THREE.WebGLRenderer( { antialias: true } );\n        renderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        renderer.shadowMap.enabled = true;\n\n\n\n        document.getElementById(\"three-map\").appendChild( renderer.domElement );\n        camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 10000 );\n        camera.position.set( 2000, 2000, 400 );\n        camera.up.set(0,0,1);\n        // controls\n        controls = new OrbitControls( camera, renderer.domElement );\n        //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\n        controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\n        controls.dampingFactor = 0.05;\n        controls.screenSpacePanning = false;\n        controls.minDistance = 100;\n        // controls.maxDistance = 500;\n        controls.maxPolarAngle = Math.PI / 2;\n        // world\n        var geometry = new THREE.PlaneBufferGeometry( 1000, 1000, 100, 100 );\n        generateTerrain(geometry)        \n\n        var material = new THREE.MeshPhongMaterial( {color: 0xffff00, side: THREE.DoubleSide} );\n\n        material.flatShading = true\n\n        plane = new THREE.Mesh( geometry, material );\n        plane.position.set( 0, 0, 0 );\n\n        plane.castShadow = true;\n        plane.receiveShadow = true;\n\n        scene.add( plane );\n\n        // var geometry = new THREE.CylinderBufferGeometry( 0, 10, 30, 4, 1 );\n        // var material = new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\n        // for ( var i = 0; i < 500; i ++ ) {\n        //   var mesh = new THREE.Mesh( geometry, material );\n        //   mesh.position.x = Math.random() * 1600 - 800;\n        //   mesh.position.y = 0;\n        //   mesh.position.z = Math.random() * 1600 - 800;\n        //   mesh.updateMatrix();\n        //   mesh.matrixAutoUpdate = false;\n        //   scene.add( mesh );\n        // }\n        // lights\n        var light = new THREE.DirectionalLight( 0xffffff );\n        light.position.set( 1000, 1000, 1000 );\n        light.shadow = {\n        camera: {\n          near: 0.5,\n          far: 300,\n          left: -50,\n          bottom: -50,\n          right: 50,\n          top: 50\n        },\n        bias: 0.0001,\n        mapSize: { x: 1024 * 6, y: 1024 * 6 }\n      };\n        scene.add( light );\n        \n\n        var lhelper = new THREE.DirectionalLightHelper( light, 5 );\n        scene.add( lhelper );\n\n        var light = new THREE.DirectionalLight( 0x002288 );\n        light.position.set( - 0, - 0, - 100 );\n        scene.add( light );\n\n\n var lhelper = new THREE.DirectionalLightHelper( light, 5 );\n        scene.add( lhelper );        \n\n        var light = new THREE.AmbientLight( 0x666666 );\n        scene.add( light );\n\n\n        var geometry = new THREE.SphereGeometry( 5, 32, 32 );\n        var material = new THREE.MeshBasicMaterial( {color: 0xff0000} );\n        helper = new THREE.Mesh( geometry, material );\n        scene.add( helper );\n\n        //\n        window.addEventListener( 'resize', onWindowResize, false );\n        window.addEventListener( 'mousemove', onMouseMove, false );\n\n      }\n\n       \n\n      function onMouseMove( event ) {\n\n        // calculate mouse position in normalized device coordinates\n        // (-1 to +1) for both components\n        const el = document.getElementById(\"three-map\").getBoundingClientRect()\n        const left = el.left;\n        const top = el.top;\n        mouse.x = ( (event.clientX-left) / window.innerWidth ) * 2 - 1;\n        mouse.y = - ( (event.clientY - top) / window.innerHeight ) * 2 + 1;\n\n        raycaster.setFromCamera( mouse, camera );\n\n        // See if the ray from the camera into the world hits one of our meshes\n        var intersects = raycaster.intersectObject( plane );\n\n        // Toggle rotation bool for meshes that we clicked\n        if ( intersects.length > 0 ) {\n\n          helper.position.set( 0, 0, 0 );\n          helper.lookAt( intersects[ 0 ].face.normal );\n\n          helper.position.copy( intersects[ 0 ].point );\n\n        }\n      }\n\n\n      function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n      }\n      function animate() {\n        requestAnimationFrame( animate );\n        controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n        render();\n      }\n      function render() {\n        renderer.render( scene, camera );\n      }\n  })\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar color=\"dark\" light expand=\"md\">\n          <NavbarBrand href=\"/\">3DRW</NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  File\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    New\n                  </DropdownItem>\n                  <DropdownItem>\n                    Open\n                  </DropdownItem>\n                  <DropdownItem divider />\n                </DropdownMenu>\n              </UncontrolledDropdown>\n              <NavItem>\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n              </NavItem>\n            </Nav>\n            <NavbarText>3drw</NavbarText>\n          </Collapse>\n        </Navbar>\n      </header>\n      <main>\n        <SplitPane split=\"horizontal\" minSize={50} defaultSize={500}>\n          <div>\n            <SplitPane split=\"vertical\" minSize={50} defaultSize={100}>\n              <div />\n              <div id = \"three-map\" />\n            </SplitPane>\n          </div>\n          <div />\n        </SplitPane>\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
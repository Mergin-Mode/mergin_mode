{"version":3,"sources":["helpers/createWorld.js","components/layout/ColorPicker.js","components/LayerPanel.js","components/App.js","serviceWorker.js","index.js"],"names":["createWorld","camera","controls","scene","renderer","pointer","partials","loaders","rendererContainer","FBXLoader","THREE","raycaster","mouse","background","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","shadowMap","enabled","document","getElementById","appendChild","domElement","position","set","up","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","g","pos","getAttribute","pa","array","hVerts","parameters","width","wVerts","height","j","i","needsUpdate","computeVertexNormals","generateTerrain","geometry","material","color","side","flatShading","plane","castShadow","receiveShadow","add","light","shadow","near","far","left","bottom","right","top","bias","mapSize","x","y","lhelper","animate","requestAnimationFrame","update","render","addEventListener","aspect","updateProjectionMatrix","event","el","getBoundingClientRect","clientX","clientY","setFromCamera","intersects","intersectObject","length","lookAt","face","normal","copy","point","prototype","load2","files","callback","scope","this","file","reader","FileReader","onload","target","readyState","status","parse","result","responseText","readAsArrayBuffer","ColorPicker","props","keys","state","clicked","style","backgroundColof","border","borderRadius","float","React","Component","defaultProps","treeData","key","title","checkable","selectable","children","Demo","onExpand","expandedKeys","console","log","onSelect","selectedKeys","info","selKey","node","eventKey","onCheck","checkedKeys","onEdit","setTimeout","onDel","e","confirm","stopPropagation","setTreeRef","tree","defaultExpandedKeys","defaultSelectedKeys","defaultCheckedKeys","treeRef","createRef","className","onClick","type","margin","showLine","multiple","checkStrictly","defaultExpandAll","Modal","setAppElement","App","useState","menuOpen","setMenuOpen","modalOpen","setModalOpen","setFiles","elements","setElements","toggleModal","useEffect","newWorld","Navbar","expand","NavbarBrand","href","NavbarToggler","Collapse","isOpen","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","DropdownItem","divider","NavItem","NavLink","NavbarText","split","minSize","maxSize","defaultSize","id","onRequestClose","onChange","object","traverse","child","isMesh","loadModel","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ccfcd10.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js';\n\nFBXLoader.prototype.load2 = function(files, callback) {\n    var scope = this;\n    var file = files[0];\n\n    var reader = new FileReader();\n\n    reader.onload = function(event) {\n        if (event.target.readyState === 2 || event.target.status === 0) {\n            var geometry = scope.parse(event.target.result || event.target.responseText);\n\n            if (callback)\n                callback(geometry);\n\n        } else {\n\n            // scope.dispatchEvent({type: 'error', message: 'Couldn\\'t load URL [' + url + ']', response: event.target.readyState});\n\n        }\n    };\n\n    reader.readAsArrayBuffer(file);\n\n};\n\nexport default function\tcreateWorld(camera,controls,scene,renderer,pointer,partials,loaders,rendererContainer) {\n\tloaders.FBXLoader = FBXLoader;\n\tvar clock = new THREE.Clock();\n      var raycaster = new THREE.Raycaster();\n      var mouse = new THREE.Vector2();\n\n      // init();\n      //render(); // remove when using next line for animation loop (requestAnimationFrame)\n\n        \n        const generateTerrain = (g /*,m, e*/) => {\n          const pos = g.getAttribute(\"position\");\n          const pa = pos.array;\n\n          const hVerts = g.parameters.width;\n          const wVerts = g.parameters.height;\n          for (let j = 0; j < hVerts; j++) {\n            for (let i = 0; i < wVerts; i++) {\n              pa[3 * (j * wVerts + i) + 2] = /*Math.random()*/0 \n            }\n          }\n          pos.needsUpdate = true;\n          g.computeVertexNormals();\n        };\n\n\n        scene = new THREE.Scene();\n        scene.background = new THREE.Color( 0x000000 );\n        // scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n        renderer = new THREE.WebGLRenderer( { antialias: true } );\n        renderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        renderer.shadowMap.enabled = true;\n\n\n\n        document.getElementById(\"three-map\").appendChild( renderer.domElement );\n        camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );\n        camera.position.set( 20, 20, 20 );\n        camera.up.set(0,0,1);\n        // controls\n        controls = new OrbitControls( camera, renderer.domElement );\n        //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\n        controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\n        controls.dampingFactor = 0.05;\n        controls.screenSpacePanning = false;\n        controls.minDistance = 10;\n        controls.maxDistance = 500;\n        controls.maxPolarAngle = Math.PI / 2;\n        // world\n        var geometry = new THREE.PlaneBufferGeometry( 1000, 1000, 100, 100 );\n        generateTerrain(geometry)        \n\n        var material = new THREE.MeshPhongMaterial( {color: 0xffff00, side: THREE.DoubleSide} );\n\n        material.flatShading = true\n\n        const plane = new THREE.Mesh( geometry, material );\n        plane.position.set( 0, 0, 0 );\n\n        plane.castShadow = true;\n        plane.receiveShadow = true;\n\n        // var geometry = new THREE.SphereGeometry( 1, 32, 32 );\n        // var material = new THREE.MeshBasicMaterial( {color: 0xffff00} );\n        // helper = new THREE.Mesh( geometry, material );\n        // scene.add( helper );\n\n        scene.add( plane );\n\n\n        // var geometry = new THREE.CylinderBufferGeometry( 0, 10, 30, 4, 1 );\n        // var material = new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\n        // for ( var i = 0; i < 500; i ++ ) {\n        //   var mesh = new THREE.Mesh( geometry, material );\n        //   mesh.position.x = Math.random() * 1600 - 800;\n        //   mesh.position.y = 0;\n        //   mesh.position.z = Math.random() * 1600 - 800;\n        //   mesh.updateMatrix();\n        //   mesh.matrixAutoUpdate = false;\n        //   scene.add( mesh );\n        // }\n        // lights\n        var light = new THREE.DirectionalLight( 0xffffff );\n        light.position.set( 1, 1, 100 );\n        light.shadow = {\n          camera: {\n            near: 0.5,\n            far: 300,\n            left: -50,\n            bottom: -50,\n            right: 50,\n            top: 50\n          },\n          bias: 0.0001,\n          mapSize: { x: 1024 * 6, y: 1024 * 6 }\n        };\n        scene.add( light );\n        \n\n        var lhelper = new THREE.DirectionalLightHelper( light, 5 );\n        scene.add( lhelper );\n\n        var light = new THREE.DirectionalLight( 0x002288 );\n        light.position.set( - 0, - 0, - 100 );\n        scene.add( light );\n\n\n        var lhelper = new THREE.DirectionalLightHelper( light, 5 );\n        scene.add( lhelper );        \n\n        var light = new THREE.AmbientLight( 0x666666 );\n        scene.add( light );\n\n\n        var geometry = new THREE.SphereGeometry( 1, 32, 32 );\n        var material = new THREE.MeshBasicMaterial( {color: 0xff0000} );\n        pointer = new THREE.Mesh( geometry, material );\n        scene.add( pointer );\n\n        // var geometry = new THREE.SphereGeometry( 1, 32, 32 );\n        // var material = new THREE.MeshBasicMaterial( {color: 0xffffff} );\n        // var test = new THREE.Mesh( geometry, material );\n        // scene.add( test );\n\n        function onMouseMove( event ) {\n        // calculate mouse position in normalized device coordinates\n        // (-1 to +1) for both components\n        const el = document.getElementById(\"three-map\").getBoundingClientRect()\n        const left = el.left;\n        const top = el.top;\n        mouse.x = ( (event.clientX-left) / window.innerWidth ) * 2 - 1;\n        mouse.y = - ( (event.clientY - top) / window.innerHeight ) * 2 + 1;\n\n        raycaster.setFromCamera( mouse, camera );\n\n        // See if the ray from the camera into the world hits one of our meshes\n        var intersects = raycaster.intersectObject( plane );\n\n        // Toggle rotation bool for meshes that we clicked\n        if ( intersects.length > 0 ) {\n\n          pointer.position.set( 0, 0, 0 );\n          pointer.lookAt( intersects[ 0 ].face.normal );\n\n          pointer.position.copy( intersects[ 0 ].point );\n\n        }\n\n}\n      function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n      }\n\n      function animate() {\n        requestAnimationFrame( animate );\n        controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n        render();\n      }\n\n      function render() {\n        // var delta = clock.getDelta();\n\n        // if ( mixer ) mixer.update( delta );\n        renderer.render( scene, camera );\n      }\n\n      animate();\n       \n      window.addEventListener( 'resize', onWindowResize, false );\n      window.addEventListener( 'mousedown', onMouseMove, false );\n\n      partials = {plane,pointer};\n      return {camera,controls,scene,renderer,pointer,partials,loaders}\n} ","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions,\nno-alert, no-console, react/no-find-dom-node */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { SketchPicker } from 'react-color';\n\nclass ColorPicker extends React.Component {\n  static propTypes = {\n  };\n\n  static defaultProps = {\n  };\n\n  constructor(props) {\n    super(props);\n    const { keys } = props;\n    this.state = {\n      clicked: false,\n      color:\"#000\"\n    };\n\n  }\n\n  render() {\n    if(this.state.clicked) {\n      return <SketchPicker />\n    }\n    return <div style={{\n      backgroundColof:this.state.color,\n      border:\"3px solid whitesmoke\",\n      borderRadius:\"4px\",\n      width:\"16px\",\n      height:\"16px\",\n      float:\"right\"\n    }}></div>\n  }\n}\n\nexport default ColorPicker;","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions,\nno-alert, no-console, react/no-find-dom-node */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport 'rc-tree/assets/index.css';\nimport './LayerPanel.css';\nimport Tree, { TreeNode } from \"rc-tree\";\nimport ColorPicker from \"./layout/ColorPicker\";\nimport { SketchPicker } from 'react-color';\n\nconst treeData = [\n  {\n    key: '0-0',\n    title: 'Scene',\n    checkable:false,\n    selectable:false,\n    children: [\n      { key: '0-0-0', title: 'Background',checkable:false,selectable:false,children: [{ key: '0-0-0-0', title: 'Color'},{ key: '0-0-0-1', title: 'Image' },{ key: '0-0-0-2', title: 'Video' }] },\n      {\n        key: '0-0-1',\n        title: 'Ground',\n        checkable:false,\n        selectable:false,\n        children: [\n          { key: '0-0-1-0', title: 'Color'},\n          { key: '0-0-1-1', title: 'Image' },\n          { key: '0-0-1-2', title: 'Vertices' },\n        ],\n      },\n    ],\n  },\n];\n\nclass Demo extends React.Component {\n  static propTypes = {\n    keys: PropTypes.array,\n  };\n\n  static defaultProps = {\n    keys: ['0-0-0-0'],\n  };\n\n  constructor(props) {\n    super(props);\n    const { keys } = props;\n    this.state = {\n      defaultExpandedKeys: keys,\n      defaultSelectedKeys: [],\n      defaultCheckedKeys: keys,\n    };\n\n    this.treeRef = React.createRef();\n  }\n\n  onExpand = expandedKeys => {\n    console.log('onExpand', expandedKeys);\n  };\n\n  onSelect = (selectedKeys, info) => {\n    console.log('selected', selectedKeys, info);\n    this.selKey = info.node.props.eventKey;\n  };\n\n  onCheck = (checkedKeys, info) => {\n    console.log('onCheck', checkedKeys, info);\n  };\n\n  onEdit = () => {\n    setTimeout(() => {\n      console.log('current key: ', this.selKey);\n    }, 0);\n  };\n\n  onDel = e => {\n    if (!window.confirm('sure to delete?')) {\n      return;\n    }\n    e.stopPropagation();\n  };\n\n  setTreeRef = tree => {\n    this.tree = tree;\n  };\n\n  render() {\n    const customLabel = (\n      <span className=\"cus-label\">\n        <span>operations: </span>\n        <span style={{ color: 'blue' }} onClick={this.onEdit}>\n          Edit\n        </span>\n        &nbsp;\n        <label onClick={e => e.stopPropagation()}>\n          <input type=\"checkbox\" /> checked\n        </label>\n        &nbsp;\n        <span style={{ color: '#EB0000' }} onClick={this.onDel}>\n          Delete\n        </span>\n      </span>\n    );\n\n    return (\n      <div style={{ margin: '0 20px' }}>\n        <Tree\n          className=\"myCls\"\n          showLine={true}\n          checkable={true}\n          multiple={false}\n          checkStrictly={true}\n          selectable={true}\n          defaultExpandAll={true}\n          onExpand={this.onExpand}\n          defaultSelectedKeys={this.state.defaultSelectedKeys}\n          defaultCheckedKeys={this.state.defaultCheckedKeys}\n          onSelect={this.onSelect}\n          onCheck={this.onCheck}\n          treeData={treeData}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Demo;","import React,{ useState,useEffect } from 'react';\nimport './App.css';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\nimport createWorld from \"../helpers/createWorld\";\nimport SplitPane from 'react-split-pane';\nimport Modal from \"react-modal\";\nimport LayerPanel from \"./LayerPanel\"\n\nModal.setAppElement('#root')\n\nfunction App() {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [files, setFiles] = useState([])\n  const [elements, setElements] = useState({\n    camera:{}, controls:{}, scene:{}, renderer:{},pointer:{}, partials:{},loaders:{}\n  })\n  const toggleModal = ()=>setModalOpen(!modalOpen);\n  const toggleMenu = () => setMenuOpen(!menuOpen);\n  const  loadModel = file => {\n    const {scene,loaders} = elements;\n    const loader = new loaders.FBXLoader();\n      loader.load2(file, object => {\n        object.traverse( child => {\n          if ( child.isMesh ) {\n            child.castShadow = true;\n            child.receiveShadow = true;\n          }\n        } );\n        scene.add( object );\n        setModalOpen(!modalOpen);       \n      });\n  }\n  useEffect(()=>{\n      let {camera,controls,scene,renderer,pointer,partials,loaders} = elements;\n      const rendererContainer = document.getElementById(\"three-map\");\n      const newWorld = createWorld(camera,controls,scene,renderer,pointer,partials,loaders,rendererContainer);\n      setElements({...newWorld});\n  },[])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar expand=\"md\">\n          <NavbarBrand href=\"/\"><div className=\"logo-container\"><div className=\"logo\"/>Mergin' Mode</div></NavbarBrand>\n          <NavbarToggler onClick={toggleMenu} />\n          <Collapse isOpen={menuOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  File\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem onClick = {toggleModal}>\n                    <span>Import </span>\n                  </DropdownItem>\n                  <DropdownItem>\n                    Open\n                  </DropdownItem>\n                  <DropdownItem divider />\n                </DropdownMenu>\n              </UncontrolledDropdown>\n              <NavItem>\n                <NavLink href=\"https://github.com/prieston/mergin_mode\">GitHub</NavLink>\n              </NavItem>\n            </Nav>\n            <NavbarText>Mergin' Mode</NavbarText>\n          </Collapse>\n        </Navbar>\n      </header>\n      <main>\n        <SplitPane split=\"horizontal\" minSize={50} maxSize={-50} defaultSize={\"80%\"}>\n\n          <div>\n            <SplitPane split=\"vertical\" minSize={50} maxSize={-50} defaultSize={\"20%\"}>\n              <div>\n          <LayerPanel />\n                \n              </div>\n              <div id = \"three-map\" />\n            </SplitPane>\n          </div>\n          <div>\n            \n          </div>\n        </SplitPane>\n\n      </main>\n      <Modal\n        isOpen={modalOpen}\n        onRequestClose={()=>setModalOpen(!modalOpen)}\n      >\n        <div className=\"container form\">\n          <div className=\"row\">\n            <div className=\"col-sm-12\">\n              <input className=\"form-control\" type=\"file\" onChange={e => {\n              setFiles([...e.target.files]);\n            }}/>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <button className=\"btn btn-primary form-control\" onClick={()=>loadModel(files)}>Load</button>\n            </div>\n            <div className=\"col-sm-6\">\n              <button className=\"btn btn-secondary form-control\" onClick={toggleModal}>Close</button>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
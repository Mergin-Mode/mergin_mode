{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","isOpen","setIsOpen","useEffect","camera","controls","scene","renderer","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","THREE","background","fog","antialias","setPixelRatio","devicePixelRatio","document","getElementById","appendChild","domElement","position","set","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","geometry","material","color","flatShading","i","mesh","x","random","y","z","updateMatrix","matrixAutoUpdate","add","light","addEventListener","init","animate","requestAnimationFrame","update","render","className","Navbar","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavItem","NavLink","NavbarText","split","minSize","defaultSize","id","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c458b5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{ useState,useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\nimport SplitPane from 'react-split-pane';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nfunction App() {\n   const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n  useEffect(()=>{\n      var camera, controls, scene, renderer;\n      init();\n      //render(); // remove when using next line for animation loop (requestAnimationFrame)\n      animate();\n      function init() {\n        scene = new THREE.Scene();\n        scene.background = new THREE.Color( 0xcccccc );\n        scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n        renderer = new THREE.WebGLRenderer( { antialias: true } );\n        renderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        document.getElementById(\"three-map\").appendChild( renderer.domElement );\n        camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );\n        camera.position.set( 400, 200, 0 );\n        // controls\n        controls = new OrbitControls( camera, renderer.domElement );\n        //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\n        controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\n        controls.dampingFactor = 0.05;\n        controls.screenSpacePanning = false;\n        controls.minDistance = 100;\n        controls.maxDistance = 500;\n        controls.maxPolarAngle = Math.PI / 2;\n        // world\n        var geometry = new THREE.CylinderBufferGeometry( 0, 10, 30, 4, 1 );\n        var material = new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\n        for ( var i = 0; i < 500; i ++ ) {\n          var mesh = new THREE.Mesh( geometry, material );\n          mesh.position.x = Math.random() * 1600 - 800;\n          mesh.position.y = 0;\n          mesh.position.z = Math.random() * 1600 - 800;\n          mesh.updateMatrix();\n          mesh.matrixAutoUpdate = false;\n          scene.add( mesh );\n        }\n        // lights\n        var light = new THREE.DirectionalLight( 0xffffff );\n        light.position.set( 1, 1, 1 );\n        scene.add( light );\n        var light = new THREE.DirectionalLight( 0x002288 );\n        light.position.set( - 1, - 1, - 1 );\n        scene.add( light );\n        var light = new THREE.AmbientLight( 0x222222 );\n        scene.add( light );\n        //\n        window.addEventListener( 'resize', onWindowResize, false );\n      }\n      function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n      }\n      function animate() {\n        requestAnimationFrame( animate );\n        controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n        render();\n      }\n      function render() {\n        renderer.render( scene, camera );\n      }\n  })\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar color=\"dark\" light expand=\"md\">\n          <NavbarBrand href=\"/\">3DRW</NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  File\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    New\n                  </DropdownItem>\n                  <DropdownItem>\n                    Open\n                  </DropdownItem>\n                  <DropdownItem divider />\n                </DropdownMenu>\n              </UncontrolledDropdown>\n              <NavItem>\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n              </NavItem>\n            </Nav>\n            <NavbarText>3drw</NavbarText>\n          </Collapse>\n        </Navbar>\n      </header>\n      <main>\n        <SplitPane split=\"horizontal\" minSize={50} defaultSize={500}>\n          <div>\n            <SplitPane split=\"vertical\" minSize={50} defaultSize={100}>\n              <div />\n              <div id = \"three-map\" />\n            </SplitPane>\n          </div>\n          <div />\n        </SplitPane>\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}